import { PublicKey, PrivateKey } from "../types";

/**
 * A key pair containing a public and private key for cryptographic operations.
 * Used across Ed25519 (signing), X25519 (key exchange), and ML-KEM (post-quantum KEM).
 * @interface
 * @property publicKey The public key for sharing or verification.
 * @property privateKey The private key for signing, decryption, or key derivation.
 * @remarks
 * - Ensure `privateKey` is handled securely and erased when no longer needed.
 * - Used in `KeyBundle` for various key roles (identity, pre-keys).
 */
export interface KeyPair {
  publicKey: PublicKey;
  privateKey: PrivateKey;
}


export interface EncapsulatePair {
  sharedSecret: Uint8Array;
  cipherText: Uint8Array;
}

/**
 * A signed pre-key used in the X3DH+PQ protocol for secure key exchange.
 * Contains an X25519 key pair and an Ed25519 signature for authenticity.
 * @interface
 * @property keyPair The X25519 key pair for Diffie-Hellman key exchange.
 * @property signature The Ed25519 signature of the public key, signed by the identity key.
 * @remarks
 * - The signature must be verified using the sender’s Ed25519 identity key before use.
 * - Used in `KeyBundle` to establish trust in the pre-key.
 */
export interface SignedPreKey {
  keyPair: KeyPair;
  signature: Uint8Array;
}

/**
 * A key bundle containing all keys required for the X3DH+PQ protocol.
 * Combines classical (Ed25519, X25519) and post-quantum (ML-KEM) keys for secure key agreement.
 * @interface
 * @property identityKey Ed25519 key pair for signing and identity verification.
 * @property identityKeyX25519 X25519 key pair for Diffie-Hellman key exchange.
 * @property signedPreKey X25519 pre-key with Ed25519 signature for trusted key exchange.
 * @property oneTimePreKey Optional X25519 one-time pre-key for forward secrecy.
 * @property pqIdentityKey ML-KEM key pair for post-quantum identity protection.
 * @property pqSignedPreKey ML-KEM pre-key for post-quantum key exchange.
 * @property pqOneTimePreKey Optional ML-KEM one-time pre-key for enhanced security.
 * @remarks
 * - Generated by `generateKeyBundle` and shared with communication partners.
 * - One-time pre-keys (`oneTimePreKey`, `pqOneTimePreKey`) are optional but recommended for forward secrecy.
 * - Private keys must be stored securely and erased after use.
 * - Public keys are shared publicly but should be validated (e.g., signature verification for `signedPreKey`).
 */
export interface KeyBundle {
  identityKey: KeyPair;
  identityKeyX25519: KeyPair;
  signedPreKey: SignedPreKey;
  pqIdentityKey: KeyPair;

  pqSignedPreKey: KeyPair;
  oneTimePreKey?: KeyPair;
  oneTimePreKeys?: KeyPair[];
  pqOneTimePreKey?: KeyPair;
  pqOneTimePreKeys?: KeyPair[];

}

/**
 * The initial message sent from the sender to the receiver in the X3DH+PQ protocol.
 * Contains ephemeral keys and encapsulations to initiate secure key agreement.
 * @interface
 * @property version The protocol version (e.g., "X3DH+PQ").
 * @property ephemeralKeyEC X25519 ephemeral public key for classical key exchange.
 * @property ephemeralKeyPQ ML-KEM ephemeral public key for post-quantum key exchange.
 * @property senderIdentityKey Ed25519 public key for sender identity verification.
 * @property senderIdentityKeyX25519 X25519 public key for sender’s key exchange.
 * @property pqEncapsulations ML-KEM ciphertexts for post-quantum shared secrets.
 * @property pqEncapsulations.identity Ciphertext for the receiver’s ML-KEM identity key.
 * @property pqEncapsulations.signedPreKey Ciphertext for the receiver’s ML-KEM signed pre-key.
 * @property pqEncapsulations.oneTimePreKey Optional ciphertext for the receiver’s ML-KEM one-time pre-key.
 * @remarks
 * - Created by `computeSenderSharedSecret` and sent to the receiver.
 * - Ephemeral keys must be single-use to ensure forward secrecy.
 * - The receiver uses this message in `computeReceiverSharedSecret` to derive the shared secret.
 * - Version should be checked for protocol compatibility.
 */
export interface InitialMessage {
  version: string;
  ephemeralKeyEC: PublicKey;
  ephemeralKeyPQ: PublicKey;
  senderIdentityKey: PublicKey;
  senderIdentityKeyX25519: PublicKey;
  pqEncapsulations: {
    identity: Uint8Array;
    signedPreKey: Uint8Array;
    oneTimePreKey?: Uint8Array;
  };

}
